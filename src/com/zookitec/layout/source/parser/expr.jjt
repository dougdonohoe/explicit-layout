options {
  STATIC = true;
  USER_CHAR_STREAM = false;
  JAVA_UNICODE_ESCAPE = true;
}


PARSER_BEGIN(ExpressionParser)

package com.zookitec.layout.source.parser;

import java.io.*;

public class ExpressionParser {

    private static ExpressionParser parser;

    public static synchronized SimpleNode parse(String expr) throws ParseException {
        if (parser == null) {
            parser = new ExpressionParser(new StringReader(expr));
        } else {
            parser.ReInit(new StringReader(expr));
        }
        return parser.start();
    }

    public static void main(String [] args) {
        if (args.length > 0) {
            try {
                SimpleNode root = ExpressionParser.parse(args[0]);
                root.dump("");
            } catch (ParseException e) {
                System.out.println("Failed to parse : " + e);
            }
        } else {
            System.out.println("usage : ExpressionParser <expr>");
        }
    }
}

PARSER_END(ExpressionParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
 < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",".",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < NUMBER:  (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ >
}

SimpleNode start() : {}
{
    expression() <EOF>
    {
        return jjtThis;
    }
}



void expression() : {}
{
    methodCall() ( "." methodCall() )*
}


void methodCall() : {}
{
    methodName() "(" [ parameter() ( "," parameter() )* ] ")"
}


void parameter() : {}
{
    LOOKAHEAD(2)
    expression()
    | componentName()
    | array()
    | number()
}


void number() :
{
    Token token;
}
{
    token = <NUMBER>
    {
        jjtThis.setValue(token.image);
    }
}



void array() : {}
{
    LOOKAHEAD(3)
    "{" componentName() ("," componentName())* "}"
|   "{" methodCall() ("," methodCall())* "}"
}



void componentName() :
{
    Token token;
}
{
    token = <IDENTIFIER>
    {
        jjtThis.setValue(token.image);
    }
}



void methodName() :
{
    Token token;
}
{
    token = <IDENTIFIER>
    {
        jjtThis.setValue(token.image);
    }
}



